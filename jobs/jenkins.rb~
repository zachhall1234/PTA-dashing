require 'net/http'
require 'json'

http_client = nil
last_build_procs = nil

SCHEDULER.every '5s', :first_in => 0 do |dashing_job|
  unless defined? settings.jenkinsperf?
    return
  end
  
  doJenkinsUpdate("jenkins-tamc",settings.jenkinsopen.chomp('/'),'p800-payments')
  doJenkinsUpdate("jenkins-tamc-frontend",settings.jenkinsopen.chomp('/'),'payments-stub')
  doJenkinsUpdate("jenkins-tamc-stub",settings.jenkinsdev.chomp('/'),'payments-stub')
  doJenkinsUpdate("jenkins-tamc-acceptance-tests",settings.jenkinsdev.chomp('/'),'p800-payments-integration-tests')
end

def doJenkinsUpdate(event_name, jenkins_url, job_name)
  http_client = buildHttpClient(jenkins_url)

  tamc_frontend_api_url = '%s/job/%s/api/json' % [jenkins_url, job_name]

  last_build_procs = [buildProc(http_client, tamc_frontend_api_url)]

  tamc_frontend_build_url = last_build_procs[0].call

  begin

    tamc_frontend_results = callJenkins(http_client, tamc_frontend_build_url)
    if tamc_frontend_results[2] == nil
      send_event(event_name, { result: "Status: BUILDING (#%s)" % [tamc_frontend_results[3]],
        timestamp: "Started at: %s" % Time.at(tamc_frontend_results[1]/1000).strftime("%H:%M %P"),
        duration: "",
        status: "building"})
    else
      send_event(event_name, { result: "Status: %s (#%s)" % [tamc_frontend_results[2],tamc_frontend_results[3]],
        timestamp: "Ran on: %s" % Time.at(tamc_frontend_results[1]/1000).strftime("%d/%m/%Y %H:%M %P"),
        duration: "Duration: %s mins" % (tamc_frontend_results[0]/1000/60),
        status: tamc_frontend_results[2].downcase})
    end

  rescue Exception => e
    puts e.backtrace
  end

end

def buildHttpClient(url)
  parsed_url = URI.parse(url)
  http = Net::HTTP.new(parsed_url.host, parsed_url.port)
  if 'https' == parsed_url.scheme
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  end
  http
end

def buildProc(http_client, url)
  Proc.new {
    begin
      response = http_client.request(Net::HTTP::Get.new(url))
      json = JSON.parse(response.body)
      json['lastBuild']['url']
    rescue Exception => e
      puts url
      puts e.backtrace
    end
  }
end

def callJenkins(http_client, url)
  response = http_client.request(Net::HTTP::Get.new('%s/api/json' % url.chomp('/')))
  json_response = JSON.parse(response.body)
  [json_response['duration'],json_response['timestamp'],json_response['result'],json_response['number']]
end
